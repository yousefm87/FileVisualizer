var dir = require('node-dir');
var async = require('async');
var pathReq = require('path');


exports.IsRightExtension = function (filePath, extension) { 
    var pathExt = pathReq.extname(filePath);
    
    if(pathExt.toLowerCase() ==  extension.toLowerCase()) {
        return true; 
    }
    else {
        return false;
    }
}


exports.GetItemList = function (consoleList, consoleToGet, callback) {
    var consoleKey = -1;

    for (var currKey in consoleList) {
        if(consoleList[currKey].consolename == consoleToGet) {
            consoleKey = currKey;
        }
    }
    
    var filteredFiles = [];
    var filteredPaths = [];
    var ItemToPath = {};
    
    dir.files(consoleList[consoleKey].filespath, function(err, files) {
      if (err) throw err;
      //we have an array of files now, so now we can iterate that array
          
      
      files.forEach(function(path) {
        if(exports.IsRightExtension(path, consoleList[consoleKey].extension)) {
            filteredFiles.push(exports.PathToItemStr(path));
            filteredPaths.push(path);
            ItemToPath[exports.PathToItemStr(path)] = path;
        }
      });
      
      //callback only on files of a certain extension
      if(filteredFiles.length != filteredPaths.length){
        filteredFiles = [];
        filteredPaths = [];
      }
        
      consoleList[consoleKey].items = filteredFiles;
      consoleList[consoleKey].paths = filteredPaths;
      consoleList[consoleKey].itemtopath = ItemToPath;
      callback();
    });
    
}


exports.RunCommandCMD = function(runCommand, waitForComp, callback) { 
    
    var exec = require('child_process').exec,
        child;

    child = exec(runCommand, function (error, stdout, stderr) {
        console.log('stdout: ' + stdout);
        console.log('stderr: ' + stderr);
        if (error !== null) {
          console.log('exec error: ' + error);
        }
        if(waitForComp) {
            callback(runCommand);
        }
    });
    
    if(!waitForComp) {
        callback(runCommand);
    }
}


exports.StartItem = function(appPath, filePath, appTitleSubStr, autoItPath, autoItActionsPath) {
    var cmdCommand1  = "\"" + appPath + "\" " + " \"" + filePath + "\""
    
    var cmdCommand2 = autoItPath + ' ' + autoItActionsPath + 'maximize.au3' + ' ' + appTitleSubStr
    
    async.series([
        function(callback) {
            exports.RunCommandCMD(cmdCommand1, false, function(runCommand) {
                console.log('Start command: ' + runCommand);
                callback(null, 'one');
            });
        },
        function(callback) {
            exports.RunCommandCMD(cmdCommand2, false, function(maxCommand) {
                console.log('MaximizeApp Command: ' + maxCommand);
                callback(null, 'two');
            });
        }
    ]);
}


exports.PathToItemStr = function (itemPath, ext) {
    var path = require('path');
    var fileNoExt = path.basename(itemPath, ext);

    fileNoExt = fileNoExt.split('.');
    fileNoExt.pop();
    fileNoExt = fileNoExt.join('.');
    return fileNoExt;
}

/*
* Recursively merge properties of two objects 
*/
function MergeRecursive(obj1, obj2) {

  for (var p in obj2) {
    try {
      // Property in destination object set; update its value.
      if ( obj2[p].constructor==Object ) {
        obj1[p] = MergeRecursive(obj1[p], obj2[p]);

      } else {
        obj1[p] = obj2[p];

      }

    } catch(e) {
      // Property in destination object not set; create it and set its value.
      obj1[p] = obj2[p];

    }
  }

  return obj1;
}
        